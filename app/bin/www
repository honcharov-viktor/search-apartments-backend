#!/usr/bin/env node

const http = require('http');

const app = require('../app');
const config = require('../config');
const database = require('../db');

const port = 8080;

app.set('port', port);

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  console.info(`Server started on port ${config.port} (${config.env})`);
}

database.connect().then(() => {
  const server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  return true;
}).catch((e) => {
  console.error(e);
  process.exit(1);
});
